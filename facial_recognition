import face_recognition
import pyttsx3
import cv2

# Load reference images and their corresponding names
reference_images = [
    r"C:\Users\lenovo\OneDrive\Desktop\New folder\CAS\r.jpg"
]
reference_names = [
    "RamaKrishna" #name
]

# Initialize an empty list for reference encodings
reference_encodings = []

# Compute face encodings for reference images
for img_path in reference_images:
    img = face_recognition.load_image_file(img_path)
    encoding = face_recognition.face_encodings(img)[0]
    reference_encodings.append(encoding)

# Initialize the text-to-speech engine
engine = pyttsx3.init()

# Open webcam feed
cap = cv2.VideoCapture(0)  # Using default webcam

if not cap.isOpened():
    print("Failed to open the webcam.")
    exit()

while True:
    ret, frame = cap.read()
    if not ret:
        print("Failed to capture frame.")
        break

    # Find faces in the frame and compute face encodings
    face_locations = face_recognition.face_locations(frame)
    face_encodings = face_recognition.face_encodings(frame, face_locations)

    # Compare face encodings with reference encodings
    for encoding, (top, right, bottom, left) in zip(face_encodings, face_locations):
        matches = face_recognition.compare_faces(reference_encodings, encoding)
        name = 'Unknown'
        
        if True in matches:
            matched_index = matches.index(True)
            name = reference_names[matched_index]
        
        # Draw bounding box around the face
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
        cv2.putText(frame, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)
        
        # Generate voice of the person's name
        engine.say(name)
        engine.runAndWait()

    # Display the frame with bounding boxes and name labels
    cv2.imshow('Webcam Face Recognition', frame)
    
    if cv2.waitKey(1) == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
